pub const OPCODES: [&str; 22] = [
    "OpReturn               = 0  | simple_instruction",
    "OpConstant             = 1  | constant_instruction",
    "OpConstantLong         = 2  | constant_long_instruction",
    "OpNegate               = 3  | simple_instruction",
    "OpAdd                  = 4  | simple_instruction",
    "OpSubtract             = 5  | simple_instruction",
    "OpMultiply             = 6  | simple_instruction",
    "OpDivide               = 7  | simple_instruction",
    "OpPower                = 8  | simple_instruction",
    "OpNull                 = 9  | simple_instruction",
    "OpTrue                 = 10 | simple_instruction",
    "OpFalse                = 11 | simple_instruction",
    "OpNot                  = 12 | simple_instruction",
    "OpEqualEqual           = 13 | simple_instruction",
    "OpGreater              = 14 | simple_instruction",
    "OpGreaterEqual         = 15 | simple_instruction",
    "OpLess                 = 16 | simple_instruction",
    "OpLessEqual            = 17 | simple_instruction",
    "OpBangEqual            = 18 | simple_instruction",
    "OpInterpolate          = 19 | simple_instruction",
    "OpPrint                = 20 | simple_instruction",
    "OpPop                  = 21 | simple_instruction",
];

pub const TOKENTYPES: [&str; 45] = [
    "TokenLeftParen            <=>  left parenthesis",
    "TokenRightParen           <=>  right parenthesis",
    "TokenLeftBrace            <=>  left curly brace",
    "TokenRightBrace           <=>  right curly brace",
    "TokenComma                <=>  comma",
    "TokenMinus                <=>  minus",
    "TokenDot                  <=>  dot",
    "TokenPlus                 <=>  plus",
    "TokenSemicolon            <=>  semicolon",
    "TokenSlash                <=>  divide",
    "TokenStar                 <=>  multiply",
    "TokenPower                <=>  power",

    "TokenStringStart          <=>  string start",
    "TokenStringEnd            <=>  string end",
    "TokenInterpolationStart   <=>  interpolation start",
    "TokenInterpolationEnd     <=>  interpolation end",

    "TokenBang                 <=>  not",
    "TokenBangEqual            <=>  not equal",
    "TokenEqual                <=>  equal",
    "TokenEqualEqual           <=>  equal equal",
    "TokenGreater              <=>  greater than",
    "TokenGreaterEqual         <=>  greater than or equal",
    "TokenLess                 <=>  less than",
    "TokenLessEqual            <=>  less than or equal",

    "TokenIdentifier           <=>  identifier",
    "TokenString               <=>  string literal",
    "TokenNumber               <=>  number literal",

    "TokenAnd                  <=>  and",
    "TokenClass                <=>  class",
    "TokenElse                 <=>  else",
    "TokenFalse                <=>  false",
    "TokenFor                  <=>  for",
    "TokenFn                   <=>  function",
    "TokenIf                   <=>  if",
    "TokenNull                 <=>  null",
    "TokenOr                   <=>  or",
    "TokenPrint                <=>  print",
    "TokenReturn               <=>  return",
    "TokenThis                 <=>  this",
    "TokenTrue                 <=>  true",
    "TokenLet                  <=>  let",
    "TokenWhile                <=>  while",

    "TokenExprEnd              <=>  end of expression",
    "TokenError(String)        <=>  error",
    "TokenEof                  <=>  end of file",
];

pub const PARSE_RULES: [&str; 44] = [
    "LeftParen              = { grouping,    None,   PrecNone       }",
    "RightParen             = { None,        None,   PrecNone       }",
    "LeftBrace              = { None,        None,   PrecNone       }",
    "RightBrace             = { None,        None,   PrecNone       }",
    "Comma                  = { None,        None,   PrecNone       }",
    "Minus                  = { unary,       binary, PrecTerm       }",
    "Plus                   = { None,        binary, PrecTerm       }",
    "Semicolon              = { None,        None,   PrecNone       }",
    "Slash                  = { None,        binary, PrecFactor     }",
    "Star                   = { None,        binary, PrecFactor     }",
    "Power                  = { None,        binary, PrecFactor     }",
    "Bang                   = { unary,       None,   PrecNone       }",

    "Equal                  = { None,        None,   PrecNone       }",
    "BangEqual              = { None,        binary, PrecEquality   }",
    "EqualEqual             = { None,        binary, PrecEquality   }",
    "Greater                = { None,        binary, PrecComparison }",
    "GreaterEqual           = { None,        binary, PrecComparison }",
    "Less                   = { None,        binary, PrecComparison }",
    "LessEqual              = { None,        binary, PrecComparison }",

    "StringStart            = { string,      None,   PrecNone       }",
    "StringEnd              = { empty,       None,   PrecNone       }",
    "InterpolationStart     = { interpolate, None,   PrecNone       }",
    "InterpolationEnd       = { None,        None,   PrecNone       }",

    "Identifier             = { None,        None,   PrecNone       }",
    "String                 = { None,        None,   PrecNone       }",
    "Number                 = { number,      None,   PrecNone       }",

    "And                    = { None,        None,   PrecNone       }",
    "Class                  = { None,        None,   PrecNone       }",
    "Else                   = { None,        None,   PrecNone       }",
    "False                  = { literal,     None,   PrecNone       }",
    "For                    = { None,        None,   PrecNone       }",
    "Fn                     = { None,        None,   PrecNone       }",
    "If                     = { None,        None,   PrecNone       }",
    "Null                   = { literal,     None,   PrecNone       }",
    "Or                     = { None,        None,   PrecNone       }",
    "Print                  = { None,        None,   PrecNone       }",
    "Return                 = { None,        None,   PrecNone       }",
    "This                   = { None,        None,   PrecNone       }",
    "True                   = { literal,     None,   PrecNone       }",
    "Let                    = { None,        None,   PrecNone       }",
    "While                  = { None,        None,   PrecNone       }",
    "ExprEnd                = { None,        None,   PrecNone       }",
    "Error(\"This can never be read\".to_string())  = { None,       None,   PrecNone }",
    "Eof                    = { None,        None,   PrecNone       }",
];
